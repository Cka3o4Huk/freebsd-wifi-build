#!/bin/sh

port_incplatform()
{
	# XXX verify it exists first
	. ${X_PORTBUILD_DIR}/scripts/cross_build.${X_PORTBUILD_PLATFORM}
}

port_incrules()
{
	# Verify the port config exists
	if [ ! -e "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/rules" ]; then
		echo "ERROR: couldn't find ${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/rules"
		exit 1
	fi

	. ${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/rules
}

port_fetch()
{

	if [ "x${PKGDISTFILE}" = "x" ]; then
		echo "ERROR: need PKGDISTFILE to fetch"
		exit 1
	fi

	# XXX TODO: eliminate the cd
	mkdir -p "${X_PACKAGE_DISTFILE_DIR}"
	( cd "${X_PACKAGE_DISTFILE_DIR}" && fetch ${PKGDISTFILE} )
}

port_clean()
{
	echo "Cleaning.."
	rm -rf "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/"
}

port_unpack()
{
	local X_PKGFILE="`basename ${PKGDISTFILE}`"
	echo "Unpacking..."
	mkdir -p "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/"
	( cd "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/" && tar zxvf ${X_PACKAGE_DISTFILE_DIR}/${X_PKGFILE} )
}

port_patch()
{
	echo "Patching.."
	for i in ${PKG_PRE_BUILD_PATCHLIST}; do
		echo "*** ${i}"
		cd "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}"
		patch -t -p0 < "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/patches/${i}"
	done
}

port_configure()
{
	if [ "x${USE_CONFIGURE}" != "xYES" ]; then
		echo "Skipping configure; not needed"
		return
	fi
	echo "Running configure ${CONFIGURE_HOSTFLAGS}"

	cd "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}"

	# The rest of the build environment is already setup for us;
	# but here is where we'd manually do things
	./configure ${CONFIGURE_HOSTFLAGS}
}

port_build()
{
	echo "Building ${CONFIGURE_HOSTFLAGS}"

	cd "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}"

	# For now, hard-code gmake. Later on we'll allow this to be
	# something other than gmake as appropriate.
	echo $CC
	gmake ${PKG_MAKE_BUILD_FLAGS}
}

port_staging()
{
	echo "Staging install.."

	# For now, this assumes DESTDIR is obeyed.
	# Obviously this isn't always going to be the case, but for
	# ./configure based bits it should work.
	mkdir -p "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/staging/"
	cd "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/${PKGWORKSUBDIR}/"
	gmake install ${PKG_INSTALL_BUILD_FLAGS} DESTDIR="${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/staging/"
}

port_package()
{
	echo "Creating package!"
	mkdir -p "${X_PORTBUILD_DIR}/pkgfiles/"
	cd "${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/work/staging/"
	#tar zcpvf ${X_PORTBUILD_DIR}/pkgfiles/${X_PORTBUILD_PORT}-${PKGVERSION}_${PKGREVISION}.tar.gz @${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/pkg-contents
	tar zcpvf ${X_PORTBUILD_DIR}/pkgfiles/${X_PORTBUILD_PORT}.tar.gz @${X_PORTBUILD_DIR}/pkgs/${X_PORTBUILD_PORT}/pkg-contents
}
